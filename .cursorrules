// React Native Expo .cursorrules

// React Native Expo best practices

const reactNativeExpoBestPractices = [
  'Use functional components with hooks',
  'Utilize Expo SDK features and APIs',
  'Implement proper navigation using Expo Router',
  "Use Expo's asset system for images and fonts",
  'Implement proper error handling and crash reporting',
  "Utilize Expo's push notification system",
];

// Folder structure

const folderStructure = ```
src/
├── components/ # Shared/common components
├── hooks/      # Shared/common hooks
├── utils/      # Shared/common utils
├── domains/
│   ├── bounty/
│   │   ├── components/
│   │   │   └── bounty-item.tsx
│   │   ├── hooks/
│   │   │   └── use-bounty.ts
│   │   ├── pages/
│   │       └── bounty-page.tsx
│   │   └── utils/
│   │       └── format-currency.ts
│   │   └── stories/
│   │       └── bounty-item.stories.tsx
│   │       └── bounty-page.stories.tsx
│   ├── auth/
│   │   ├── components/
│   │   │   └── auth-form.tsx
│   │   ├── hooks/
│   │       └── use-auth-query.ts
│   │   ├── providers/
│   │       └── auth-guard-provider.tsx
│   │   └── api/
│   │       └── index.ts
│   └── base/
│       ├── components/
│       │   └── heading.tsx
│       │   └── paragraph.tsx
│       ├── hooks/
│       │   └── ...
│       └── lib/
│           └── create-pretendard-font.ts
│       └── providers/
│           └── auth-guard-provider.tsx
│       └── stories/
│           └── heading.stories.tsx
│           └── paragraph.stories.tsx

```;

// Additional instructions

const additionalInstructions = `

1. Use TypeScript for type safety
2. Implement proper styling using Tamagui
3. Utilize Expo's vector icons
4. Use Expo's secure store for sensitive data
5. Implement proper offline support
6. Follow React Native best practices for performance
7. Use proper naming conventions for Tamagui, similar to styled-components
8. Use the css prop for conditional styling when appropriate
9. Follow the tamagui documentation for best practices
10. Use bun for package management
11. Only add comments when necessary, and only in the code that is not self-explanatory
    `;
